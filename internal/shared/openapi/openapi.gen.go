// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Character defines model for Character.
type Character struct {
	Id      string `json:"id"`
	MovieId string `json:"movie_id"`
	Name    string `json:"name"`
}

// CharacterRequest defines model for CharacterRequest.
type CharacterRequest struct {
	MovieId *string `json:"movie_id,omitempty"`
	Name    string  `json:"name"`
}

// Movie defines model for Movie.
type Movie struct {
	Id    string `json:"id"`
	Title string `json:"title"`
	Year  int    `json:"year"`
}

// MovieRequest defines model for MovieRequest.
type MovieRequest struct {
	Title string `json:"title"`
	Year  int    `json:"year"`
}

// CharacterId defines model for character_id.
type CharacterId = string

// MovieId defines model for movie_id.
type MovieId = string

// UpdateCharacterJSONRequestBody defines body for UpdateCharacter for application/json ContentType.
type UpdateCharacterJSONRequestBody = CharacterRequest

// CreateMovieJSONRequestBody defines body for CreateMovie for application/json ContentType.
type CreateMovieJSONRequestBody = MovieRequest

// UpdateMovieJSONRequestBody defines body for UpdateMovie for application/json ContentType.
type UpdateMovieJSONRequestBody = MovieRequest

// CreateCharacterForMovieJSONRequestBody defines body for CreateCharacterForMovie for application/json ContentType.
type CreateCharacterForMovieJSONRequestBody = CharacterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all characters
	// (GET /characters)
	ListCharacters(ctx echo.Context) error
	// Delete a character
	// (DELETE /characters/{character_id})
	DeleteCharacter(ctx echo.Context, characterId CharacterId) error
	// Get character by ID
	// (GET /characters/{character_id})
	GetCharacter(ctx echo.Context, characterId CharacterId) error
	// Update a character
	// (PUT /characters/{character_id})
	UpdateCharacter(ctx echo.Context, characterId CharacterId) error
	// List all movies
	// (GET /movies)
	ListMovies(ctx echo.Context) error
	// Create a new movie
	// (POST /movies)
	CreateMovie(ctx echo.Context) error
	// Delete a movie
	// (DELETE /movies/{movie_id})
	DeleteMovie(ctx echo.Context, movieId MovieId) error
	// Get movie by ID
	// (GET /movies/{movie_id})
	GetMovie(ctx echo.Context, movieId MovieId) error
	// Update a movie
	// (PUT /movies/{movie_id})
	UpdateMovie(ctx echo.Context, movieId MovieId) error
	// List characters for a movie
	// (GET /movies/{movie_id}/characters)
	ListCharactersForMovie(ctx echo.Context, movieId MovieId) error
	// Create a character for a movie
	// (POST /movies/{movie_id}/characters)
	CreateCharacterForMovie(ctx echo.Context, movieId MovieId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) ListCharacters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCharacters(ctx)
	return err
}

// DeleteCharacter converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCharacter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "character_id" -------------
	var characterId CharacterId

	err = runtime.BindStyledParameterWithOptions("simple", "character_id", ctx.Param("character_id"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter character_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCharacter(ctx, characterId)
	return err
}

// GetCharacter converts echo context to params.
func (w *ServerInterfaceWrapper) GetCharacter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "character_id" -------------
	var characterId CharacterId

	err = runtime.BindStyledParameterWithOptions("simple", "character_id", ctx.Param("character_id"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter character_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCharacter(ctx, characterId)
	return err
}

// UpdateCharacter converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCharacter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "character_id" -------------
	var characterId CharacterId

	err = runtime.BindStyledParameterWithOptions("simple", "character_id", ctx.Param("character_id"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter character_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCharacter(ctx, characterId)
	return err
}

// ListMovies converts echo context to params.
func (w *ServerInterfaceWrapper) ListMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMovies(ctx)
	return err
}

// CreateMovie converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMovie(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMovie(ctx)
	return err
}

// DeleteMovie converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMovie(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movie_id" -------------
	var movieId MovieId

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", ctx.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movie_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMovie(ctx, movieId)
	return err
}

// GetMovie converts echo context to params.
func (w *ServerInterfaceWrapper) GetMovie(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movie_id" -------------
	var movieId MovieId

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", ctx.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movie_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMovie(ctx, movieId)
	return err
}

// UpdateMovie converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMovie(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movie_id" -------------
	var movieId MovieId

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", ctx.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movie_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMovie(ctx, movieId)
	return err
}

// ListCharactersForMovie converts echo context to params.
func (w *ServerInterfaceWrapper) ListCharactersForMovie(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movie_id" -------------
	var movieId MovieId

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", ctx.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movie_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCharactersForMovie(ctx, movieId)
	return err
}

// CreateCharacterForMovie converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCharacterForMovie(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movie_id" -------------
	var movieId MovieId

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", ctx.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movie_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCharacterForMovie(ctx, movieId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/characters", wrapper.ListCharacters)
	router.DELETE(baseURL+"/characters/:character_id", wrapper.DeleteCharacter)
	router.GET(baseURL+"/characters/:character_id", wrapper.GetCharacter)
	router.PUT(baseURL+"/characters/:character_id", wrapper.UpdateCharacter)
	router.GET(baseURL+"/movies", wrapper.ListMovies)
	router.POST(baseURL+"/movies", wrapper.CreateMovie)
	router.DELETE(baseURL+"/movies/:movie_id", wrapper.DeleteMovie)
	router.GET(baseURL+"/movies/:movie_id", wrapper.GetMovie)
	router.PUT(baseURL+"/movies/:movie_id", wrapper.UpdateMovie)
	router.GET(baseURL+"/movies/:movie_id/characters", wrapper.ListCharactersForMovie)
	router.POST(baseURL+"/movies/:movie_id/characters", wrapper.CreateCharacterForMovie)

}
