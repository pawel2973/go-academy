// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Character defines model for Character.
type Character struct {
	Id      *string `json:"id,omitempty"`
	MovieId *string `json:"movie_id,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// CharacterRequest defines model for CharacterRequest.
type CharacterRequest struct {
	Name string `json:"name"`
}

// Movie defines model for Movie.
type Movie struct {
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Year  *int    `json:"year,omitempty"`
}

// MovieRequest defines model for MovieRequest.
type MovieRequest struct {
	Title string `json:"title"`
	Year  int    `json:"year"`
}

// PostMoviesJSONRequestBody defines body for PostMovies for application/json ContentType.
type PostMoviesJSONRequestBody = MovieRequest

// PostMoviesMovieIdCharactersJSONRequestBody defines body for PostMoviesMovieIdCharacters for application/json ContentType.
type PostMoviesMovieIdCharactersJSONRequestBody = CharacterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a character
	// (DELETE /characters/{id})
	DeleteCharactersId(ctx echo.Context, id string) error
	// List all movies
	// (GET /movies)
	GetMovies(ctx echo.Context) error
	// Create a new movie
	// (POST /movies)
	PostMovies(ctx echo.Context) error
	// List all characters for a movie
	// (GET /movies/{movie_id}/characters)
	GetMoviesMovieIdCharacters(ctx echo.Context, movieId string) error
	// Create a character for a movie
	// (POST /movies/{movie_id}/characters)
	PostMoviesMovieIdCharacters(ctx echo.Context, movieId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteCharactersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCharactersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCharactersId(ctx, id)
	return err
}

// GetMovies converts echo context to params.
func (w *ServerInterfaceWrapper) GetMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMovies(ctx)
	return err
}

// PostMovies converts echo context to params.
func (w *ServerInterfaceWrapper) PostMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMovies(ctx)
	return err
}

// GetMoviesMovieIdCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoviesMovieIdCharacters(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movie_id" -------------
	var movieId string

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", ctx.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movie_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMoviesMovieIdCharacters(ctx, movieId)
	return err
}

// PostMoviesMovieIdCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) PostMoviesMovieIdCharacters(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movie_id" -------------
	var movieId string

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", ctx.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movie_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMoviesMovieIdCharacters(ctx, movieId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/characters/:id", wrapper.DeleteCharactersId)
	router.GET(baseURL+"/movies", wrapper.GetMovies)
	router.POST(baseURL+"/movies", wrapper.PostMovies)
	router.GET(baseURL+"/movies/:movie_id/characters", wrapper.GetMoviesMovieIdCharacters)
	router.POST(baseURL+"/movies/:movie_id/characters", wrapper.PostMoviesMovieIdCharacters)

}
